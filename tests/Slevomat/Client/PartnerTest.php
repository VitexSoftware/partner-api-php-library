<?php

namespace Test\Slevomat\Client;

use Slevomat\Client\Partner;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-15 at 22:53:41.
 */
class PartnerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Slevomat\Client\Partner
     */
    protected $object;

    /**
     * Get Method accessible
     * 
     * @param string $name
     * 
     * @return type
     */
    protected static function getMethod($name)
    {
        $class  = new \ReflectionClass('Slevomat\Client\Partner');
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Partner(Partner::SERVER_CZ,
            constant('SLEVOMAT_TOKEN'));
    }

    /**
     * Test Constructor
     *
     * @expectedException \RuntimeException
     * @expectedExceptionMessage An invalid server was provided: "noserver".
     * @covers Slevomat\Client\Partner::__construct
     */
    public function testConstructor()
    {
        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder(get_class($this->object))
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();
        $mock->__construct(Partner::SERVER_SK, constant('SLEVOMAT_TOKEN'));

        $mock->__construct('noserver', 'notoken');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Slevomat\Client\Partner::checkVoucher
     */
    public function testCheckVoucher()
    {
        $code = constant('VOUCHER_CODE');
        $this->object->checkVoucher($code, $response);
    }

    /**
     * @covers Slevomat\Client\Partner::applyVoucher
     */
    public function testApplyVoucher()
    {
        $code = constant('VOUCHER_CODE');
        $this->object->applyVoucher($code, $response);
    }

    /**
     * @covers Slevomat\Client\Partner::performRequest
     */
    public function testPerformRequest()
    {
        $performRequest = self::getMethod('performRequest');
        $result         = $performRequest->invokeArgs($this->object,
            ['vouchercheck',
            ['token' => constant('SLEVOMAT_TOKEN'), 'code' => constant('VOUCHER_CODE')]
        ]);
    }

    /**
     * @before checkVoucher
     * @covers Slevomat\Client\Partner::prepareRequest
     */
    public function testPrepareRequest()
    {
        $performRequest = self::getMethod('prepareRequest');
        $result         = $performRequest->invoke($this->object);
    }

    /**
     * @covers Slevomat\Client\Partner::prepareRequestUrl
     */
    public function testPrepareRequestUrl()
    {
        $performRequest = self::getMethod('prepareRequestUrl');
        $result         = $performRequest->invokeArgs($this->object,
            ['action',
            ['param' => 'value']]);
        $this->assertEquals('https://www.slevomat.cz/api/action?param=value',
            $result);
    }

    /**
     * @covers Slevomat\Client\Partner::checkRequirements
     */
    public function testCheckRequirements()
    {
        $performRequest = self::getMethod('checkRequirements');
        $result         = $performRequest->invoke($this->object);
    }
}
